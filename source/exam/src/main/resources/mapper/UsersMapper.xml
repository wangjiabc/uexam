<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.alvis.exam.repository.UsersMapper">
  <resultMap id="BaseResultMap" type="com.alvis.exam.domain.Users">
    <result column="id" jdbcType="VARCHAR" property="id" />
    <result column="open_id" jdbcType="VARCHAR" property="openId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="card_type" jdbcType="VARCHAR" property="cardType" />
    <result column="sex" jdbcType="VARCHAR" property="sex" />
    <result column="id_number" jdbcType="VARCHAR" property="idNumber" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="causa" jdbcType="VARCHAR" property="causa" />
    <result column="date" jdbcType="VARCHAR" property="date" />
    <result column="up_date" jdbcType="VARCHAR" property="upDate" />
    <result column="is_look" jdbcType="INTEGER" property="isLook" />
    <result column="month_sale_norm" jdbcType="INTEGER" property="monthSaleNorm" />
    <result column="quarter_sale_norm" jdbcType="INTEGER" property="quarterSaleNorm" />
  </resultMap>
  <insert id="insert" parameterType="com.alvis.exam.domain.Users">
    insert into users (id, open_id, name, 
      card_type, sex, id_number, 
      phone, causa, date, 
      up_date,, is_look, month_sale_norm,
      quarter_sale_norm)
    values (#{id,jdbcType=VARCHAR}, #{openId,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{cardType,jdbcType=VARCHAR}, #{sex,jdbcType=VARCHAR}, #{idNumber,jdbcType=VARCHAR}, 
      #{phone,jdbcType=VARCHAR}, #{causa,jdbcType=VARCHAR}, #{date,jdbcType=VARCHAR}, 
      #{upDate,jdbcType=VARCHAR},, #{isLook,jdbcType=INTEGER}, #{monthSaleNorm,jdbcType=INTEGER},
      #{quarterSaleNorm,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.alvis.exam.domain.Users">
    insert into users
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="openId != null">
        open_id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="cardType != null">
        card_type,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="idNumber != null">
        id_number,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="causa != null">
        causa,
      </if>
      <if test="date != null">
        date,
      </if>
      <if test="upDate != null">
        up_date,
      </if>
      <if test="isLook != null">
        is_look,
      </if>
      <if test="monthSaleNorm != null">
        month_sale_norm,
      </if>
      <if test="quarterSaleNorm != null">
        quarter_sale_norm,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="openId != null">
        #{openId,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="cardType != null">
        #{cardType,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="idNumber != null">
        #{idNumber,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="causa != null">
        #{causa,jdbcType=VARCHAR},
      </if>
      <if test="date != null">
        #{date,jdbcType=VARCHAR},
      </if>
      <if test="upDate != null">
        #{upDate,jdbcType=VARCHAR},
      </if>
      <if test="isLook != null">
        #{isLook,jdbcType=INTEGER},
      </if>
      <if test="monthSaleNorm != null">
        #{monthSaleNorm,jdbcType=INTEGER},
      </if>
      <if test="quarterSaleNorm != null">
        #{quarterSaleNorm,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>

  <select id="findVisits"  resultType="com.alvis.exam.domain.dto.VisitUsersDTO">
    SELECT con.*,pos.wgs84_lng wgs84Lng,pos.wgs84_lat wgs84Lat,pos.id positionId  FROM (
        SELECT u.id usersId,u.`name`,u.id_number idNumber,ul.license,ul.address FROM users u LEFT JOIN user_license ul
        ON u.phone LIKE ul.phone WHERE area = '2'
    ) con LEFT JOIN position pos on con.license LIKE pos.license  WHERE  wgs84_lng is not NULL and wgs84_lat is not NULL
  </select>

  <select id="findConById" resultType="com.alvis.exam.domain.Users"  parameterType="java.lang.Integer">
        SELECT a.*,pos.wgs84_lng wgs84Lng,pos.wgs84_lat wgs84Lat
        FROM
        (SELECT u.*,ul.address,ul.license FROM users u LEFT JOIN user_license ul ON u.phone = ul.phone WHERE u.id  = #{usersId,jdbcType=INTEGER} ) a
         LEFT JOIN position pos on a.license = pos.license
  </select>

  <select id="findVisiter" resultMap="BaseResultMap"  parameterType="com.alvis.exam.domain.Users">
        SELECT a.*,pos.wgs84_lng wgs84Lng,pos.wgs84_lat wgs84Lat
        FROM (SELECT u.*,ul.address,ul.license FROM (SELECT * FROM users WHERE id  like #{id,jdbcType=INTEGER} ) u
        LEFT JOIN user_license ul  ON u.phone  = ul.phone
) a LEFT JOIN position pos on a.license  = pos.license
  </select>


  <select id="findUser" resultType="com.alvis.exam.domain.User">
    SELECT tu.id,tu.user_name userName FROM visited_users vu LEFT JOIN t_user tu on vu.user_id = tu.id GROUP BY user_id
  </select>

</mapper>